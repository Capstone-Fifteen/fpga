// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MLP_1,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.622200,HLS_SYN_LAT=832971302736,HLS_SYN_TPT=none,HLS_SYN_MEM=276,HLS_SYN_DSP=22,HLS_SYN_FF=43226,HLS_SYN_LUT=17407,HLS_VERSION=2020_1}" *)

module MLP_1 (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 123'd1;
parameter    ap_ST_fsm_state2 = 123'd2;
parameter    ap_ST_fsm_state3 = 123'd4;
parameter    ap_ST_fsm_state4 = 123'd8;
parameter    ap_ST_fsm_state5 = 123'd16;
parameter    ap_ST_fsm_state6 = 123'd32;
parameter    ap_ST_fsm_state7 = 123'd64;
parameter    ap_ST_fsm_state8 = 123'd128;
parameter    ap_ST_fsm_state9 = 123'd256;
parameter    ap_ST_fsm_state10 = 123'd512;
parameter    ap_ST_fsm_state11 = 123'd1024;
parameter    ap_ST_fsm_state12 = 123'd2048;
parameter    ap_ST_fsm_state13 = 123'd4096;
parameter    ap_ST_fsm_state14 = 123'd8192;
parameter    ap_ST_fsm_state15 = 123'd16384;
parameter    ap_ST_fsm_state16 = 123'd32768;
parameter    ap_ST_fsm_state17 = 123'd65536;
parameter    ap_ST_fsm_state18 = 123'd131072;
parameter    ap_ST_fsm_state19 = 123'd262144;
parameter    ap_ST_fsm_state20 = 123'd524288;
parameter    ap_ST_fsm_state21 = 123'd1048576;
parameter    ap_ST_fsm_state22 = 123'd2097152;
parameter    ap_ST_fsm_state23 = 123'd4194304;
parameter    ap_ST_fsm_state24 = 123'd8388608;
parameter    ap_ST_fsm_state25 = 123'd16777216;
parameter    ap_ST_fsm_state26 = 123'd33554432;
parameter    ap_ST_fsm_state27 = 123'd67108864;
parameter    ap_ST_fsm_state28 = 123'd134217728;
parameter    ap_ST_fsm_state29 = 123'd268435456;
parameter    ap_ST_fsm_state30 = 123'd536870912;
parameter    ap_ST_fsm_state31 = 123'd1073741824;
parameter    ap_ST_fsm_state32 = 123'd2147483648;
parameter    ap_ST_fsm_state33 = 123'd4294967296;
parameter    ap_ST_fsm_state34 = 123'd8589934592;
parameter    ap_ST_fsm_state35 = 123'd17179869184;
parameter    ap_ST_fsm_state36 = 123'd34359738368;
parameter    ap_ST_fsm_state37 = 123'd68719476736;
parameter    ap_ST_fsm_state38 = 123'd137438953472;
parameter    ap_ST_fsm_state39 = 123'd274877906944;
parameter    ap_ST_fsm_state40 = 123'd549755813888;
parameter    ap_ST_fsm_state41 = 123'd1099511627776;
parameter    ap_ST_fsm_state42 = 123'd2199023255552;
parameter    ap_ST_fsm_state43 = 123'd4398046511104;
parameter    ap_ST_fsm_state44 = 123'd8796093022208;
parameter    ap_ST_fsm_state45 = 123'd17592186044416;
parameter    ap_ST_fsm_state46 = 123'd35184372088832;
parameter    ap_ST_fsm_state47 = 123'd70368744177664;
parameter    ap_ST_fsm_state48 = 123'd140737488355328;
parameter    ap_ST_fsm_state49 = 123'd281474976710656;
parameter    ap_ST_fsm_state50 = 123'd562949953421312;
parameter    ap_ST_fsm_state51 = 123'd1125899906842624;
parameter    ap_ST_fsm_state52 = 123'd2251799813685248;
parameter    ap_ST_fsm_state53 = 123'd4503599627370496;
parameter    ap_ST_fsm_state54 = 123'd9007199254740992;
parameter    ap_ST_fsm_state55 = 123'd18014398509481984;
parameter    ap_ST_fsm_state56 = 123'd36028797018963968;
parameter    ap_ST_fsm_state57 = 123'd72057594037927936;
parameter    ap_ST_fsm_state58 = 123'd144115188075855872;
parameter    ap_ST_fsm_state59 = 123'd288230376151711744;
parameter    ap_ST_fsm_state60 = 123'd576460752303423488;
parameter    ap_ST_fsm_state61 = 123'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 123'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 123'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 123'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 123'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 123'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 123'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 123'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 123'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 123'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 123'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 123'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 123'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 123'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 123'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 123'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 123'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 123'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 123'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 123'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 123'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 123'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 123'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 123'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 123'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 123'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 123'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 123'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 123'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 123'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 123'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 123'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 123'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 123'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 123'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 123'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 123'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 123'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 123'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 123'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 123'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 123'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 123'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 123'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 123'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 123'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 123'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 123'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 123'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 123'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 123'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 123'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 123'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 123'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 123'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 123'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 123'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 123'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 123'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 123'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 123'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 123'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 123'd5316911983139663491615228241121378304;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg S_AXIS_TREADY;

 reg    ap_rst_n_inv;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [122:0] ap_CS_fsm;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln88_fu_1749_p2;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln94_fu_1799_p2;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln100_fu_1849_p2;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln105_fu_1875_p2;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln109_fu_1892_p2;
wire    ap_CS_fsm_state31;
wire   [0:0] icmp_ln113_fu_1909_p2;
wire    ap_CS_fsm_state32;
wire   [0:0] icmp_ln117_fu_1926_p2;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln121_fu_1943_p2;
wire    ap_CS_fsm_state34;
wire   [0:0] icmp_ln125_fu_1960_p2;
wire    ap_CS_fsm_state35;
wire   [0:0] icmp_ln129_fu_1977_p2;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln133_fu_1994_p2;
wire    ap_CS_fsm_state37;
wire   [0:0] icmp_ln137_fu_2011_p2;
wire    ap_CS_fsm_state38;
wire   [0:0] icmp_ln141_fu_2028_p2;
wire    ap_CS_fsm_state39;
wire   [0:0] icmp_ln145_fu_2045_p2;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state42;
wire   [0:0] icmp_ln158_fu_2074_p2;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state123;
wire   [31:0] hidden1_q0;
reg   [31:0] reg_1319;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state55;
wire   [31:0] grp_fu_1279_p2;
reg   [31:0] reg_1324;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state119;
wire   [31:0] grp_fu_1283_p2;
reg   [31:0] reg_1333;
wire   [31:0] grp_fu_1291_p2;
reg   [31:0] reg_1338;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state102;
wire   [31:0] grp_fu_1287_p2;
reg   [31:0] reg_1343;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state105;
wire   [31:0] hidden2_q0;
reg   [31:0] reg_1348;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state89;
wire   [31:0] outputs_q0;
reg   [31:0] reg_1353;
wire    ap_CS_fsm_state115;
wire   [7:0] add_ln60_fu_1359_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln61_fu_1376_p2;
wire    ap_CS_fsm_state3;
wire   [7:0] add_ln62_fu_1393_p2;
wire    ap_CS_fsm_state4;
wire   [5:0] add_ln63_fu_1410_p2;
wire    ap_CS_fsm_state5;
wire   [7:0] add_ln64_fu_1427_p2;
wire    ap_CS_fsm_state6;
wire   [7:0] add_ln65_fu_1444_p2;
wire    ap_CS_fsm_state7;
wire   [5:0] add_ln66_fu_1461_p2;
wire    ap_CS_fsm_state8;
wire   [7:0] add_ln67_fu_1478_p2;
reg   [7:0] add_ln67_reg_2415;
wire    ap_CS_fsm_state9;
wire   [7:0] add_ln67_1_fu_1484_p2;
wire    ap_CS_fsm_state10;
wire   [7:0] add_ln68_fu_1515_p2;
reg   [7:0] add_ln68_reg_2431;
wire    ap_CS_fsm_state11;
wire   [7:0] add_ln68_1_fu_1521_p2;
wire    ap_CS_fsm_state12;
wire   [5:0] add_ln69_fu_1552_p2;
reg   [5:0] add_ln69_reg_2447;
wire    ap_CS_fsm_state13;
wire   [7:0] add_ln69_1_fu_1558_p2;
wire    ap_CS_fsm_state14;
wire   [7:0] add_ln70_fu_1589_p2;
wire    ap_CS_fsm_state15;
wire   [7:0] add_ln71_fu_1606_p2;
wire    ap_CS_fsm_state16;
wire   [7:0] add_ln72_fu_1623_p2;
wire    ap_CS_fsm_state17;
wire   [7:0] add_ln73_fu_1640_p2;
wire    ap_CS_fsm_state18;
wire   [7:0] add_ln75_fu_1657_p2;
wire    ap_CS_fsm_state19;
wire   [7:0] add_ln76_fu_1674_p2;
wire    ap_CS_fsm_state20;
wire   [7:0] add_ln77_fu_1691_p2;
wire    ap_CS_fsm_state21;
wire   [7:0] add_ln78_fu_1708_p2;
wire    ap_CS_fsm_state22;
wire   [8:0] i_fu_1731_p2;
reg   [8:0] i_reg_2530;
wire    ap_CS_fsm_state23;
wire   [17:0] zext_ln88_fu_1745_p1;
reg   [17:0] zext_ln88_reg_2535;
wire   [0:0] icmp_ln87_fu_1725_p2;
wire   [8:0] j_fu_1755_p2;
reg    ap_block_state24;
wire   [8:0] i_24_fu_1781_p2;
reg   [8:0] i_24_reg_2551;
wire    ap_CS_fsm_state25;
wire   [17:0] zext_ln94_fu_1795_p1;
reg   [17:0] zext_ln94_reg_2556;
wire   [0:0] icmp_ln93_fu_1775_p2;
wire   [8:0] j_4_fu_1805_p2;
reg    ap_block_state26;
wire   [6:0] i_26_fu_1831_p2;
reg   [6:0] i_26_reg_2572;
wire    ap_CS_fsm_state27;
wire   [15:0] zext_ln100_fu_1845_p1;
reg   [15:0] zext_ln100_reg_2577;
wire   [0:0] icmp_ln99_fu_1825_p2;
wire   [8:0] j_5_fu_1855_p2;
reg    ap_block_state28;
wire   [8:0] i_47_fu_1881_p2;
reg    ap_block_state29;
wire   [8:0] i_48_fu_1898_p2;
reg    ap_block_state30;
wire   [6:0] i_49_fu_1915_p2;
reg    ap_block_state31;
wire   [8:0] i_50_fu_1932_p2;
reg    ap_block_state32;
wire   [8:0] i_51_fu_1949_p2;
reg    ap_block_state33;
wire   [8:0] i_52_fu_1966_p2;
reg    ap_block_state34;
wire   [8:0] i_53_fu_1983_p2;
reg    ap_block_state35;
wire   [8:0] i_54_fu_2000_p2;
reg    ap_block_state36;
wire   [8:0] i_55_fu_2017_p2;
reg    ap_block_state37;
wire   [8:0] i_56_fu_2034_p2;
reg    ap_block_state38;
wire   [8:0] i_57_fu_2051_p2;
reg    ap_block_state39;
reg   [31:0] tmp_data_15_reg_2678;
reg   [31:0] tmp_data_16_reg_2683;
wire   [19:0] j_6_fu_2068_p2;
reg   [19:0] j_6_reg_2691;
wire    ap_CS_fsm_state41;
wire    regslice_both_M_AXIS_V_data_U_apdone_blk;
wire   [8:0] i_58_fu_2080_p2;
reg    ap_block_state42;
wire   [8:0] i_59_fu_2097_p2;
reg   [8:0] i_59_reg_2707;
wire    ap_CS_fsm_state43;
wire   [31:0] grp_dot_product_2_fu_1255_ap_return;
reg   [31:0] tmp6_reg_2712;
wire    ap_CS_fsm_state44;
wire    grp_dot_product_2_fu_1255_ap_ready;
wire    grp_dot_product_2_fu_1255_ap_done;
wire   [8:0] i_60_fu_2114_p2;
reg   [8:0] i_60_reg_2720;
wire    ap_CS_fsm_state46;
reg   [7:0] hidden1_addr_2_reg_2725;
wire   [0:0] icmp_ln167_fu_2108_p2;
wire   [31:0] hidden1_bias_q0;
reg   [31:0] hidden1_bias_load_reg_2735;
wire   [8:0] i_61_fu_2183_p2;
reg   [8:0] i_61_reg_2743;
wire    ap_CS_fsm_state54;
wire   [63:0] zext_ln173_fu_2189_p1;
reg   [63:0] zext_ln173_reg_2748;
wire   [0:0] icmp_ln172_fu_2177_p2;
reg   [7:0] hidden1_addr_3_reg_2754;
wire   [31:0] moving_mean1_q0;
reg   [31:0] moving_mean1_load_reg_2769;
wire   [31:0] moving_var1_q0;
reg   [31:0] moving_var1_load_reg_2774;
wire    ap_CS_fsm_state67;
wire   [31:0] gamma1_q0;
reg   [31:0] gamma1_load_reg_2789;
wire   [31:0] beta1_q0;
reg   [31:0] beta1_load_reg_2794;
wire   [8:0] i_62_fu_2202_p2;
reg   [8:0] i_62_reg_2802;
wire    ap_CS_fsm_state77;
wire   [31:0] grp_dot_product_1_fu_1263_ap_return;
reg   [31:0] tmp_5_reg_2807;
wire    ap_CS_fsm_state78;
wire    grp_dot_product_1_fu_1263_ap_ready;
wire    grp_dot_product_1_fu_1263_ap_done;
wire   [8:0] i_63_fu_2219_p2;
reg   [8:0] i_63_reg_2815;
wire    ap_CS_fsm_state80;
reg   [7:0] hidden2_addr_2_reg_2820;
wire   [0:0] icmp_ln180_fu_2213_p2;
wire   [31:0] hidden2_bias_q0;
reg   [31:0] hidden2_bias_load_reg_2830;
wire   [8:0] i_64_fu_2288_p2;
reg   [8:0] i_64_reg_2838;
wire    ap_CS_fsm_state88;
wire   [63:0] zext_ln186_fu_2294_p1;
reg   [63:0] zext_ln186_reg_2843;
wire   [0:0] icmp_ln185_fu_2282_p2;
reg   [7:0] hidden2_addr_3_reg_2849;
wire   [31:0] moving_mean2_q0;
reg   [31:0] moving_mean2_load_reg_2864;
wire   [31:0] moving_var2_q0;
reg   [31:0] moving_var2_load_reg_2869;
wire    ap_CS_fsm_state101;
wire   [31:0] gamma2_q0;
reg   [31:0] gamma2_load_reg_2884;
wire   [31:0] beta2_q0;
reg   [31:0] beta2_load_reg_2889;
wire   [6:0] i_65_fu_2307_p2;
reg   [6:0] i_65_reg_2897;
wire    ap_CS_fsm_state111;
wire   [31:0] grp_dot_product_fu_1271_ap_return;
reg   [31:0] tmp_s_reg_2902;
wire    ap_CS_fsm_state112;
wire    grp_dot_product_fu_1271_ap_ready;
wire    grp_dot_product_fu_1271_ap_done;
wire   [6:0] i_66_fu_2324_p2;
reg   [6:0] i_66_reg_2910;
wire    ap_CS_fsm_state114;
reg   [5:0] outputs_addr_2_reg_2915;
wire   [0:0] icmp_ln193_fu_2318_p2;
wire   [31:0] outputs_bias_q0;
reg   [31:0] outputs_bias_load_reg_2925;
wire   [6:0] i_67_fu_2342_p2;
reg   [6:0] i_67_reg_2933;
wire    ap_CS_fsm_state121;
wire   [0:0] icmp_ln200_fu_2336_p2;
wire   [0:0] tmp_last_fu_2353_p2;
reg   [0:0] tmp_last_reg_2943;
reg   [7:0] inputs_address0;
reg    inputs_ce0;
reg    inputs_we0;
reg   [31:0] inputs_d0;
wire   [31:0] inputs_q0;
reg   [7:0] hidden1_address0;
reg    hidden1_ce0;
reg    hidden1_we0;
reg   [31:0] hidden1_d0;
reg   [7:0] hidden2_address0;
reg    hidden2_ce0;
reg    hidden2_we0;
reg   [31:0] hidden2_d0;
reg   [5:0] outputs_address0;
reg    outputs_ce0;
reg    outputs_we0;
reg   [31:0] outputs_d0;
reg   [7:0] hidden1_bias_address0;
reg    hidden1_bias_ce0;
reg    hidden1_bias_we0;
reg   [31:0] hidden1_bias_d0;
reg   [7:0] hidden2_bias_address0;
reg    hidden2_bias_ce0;
reg    hidden2_bias_we0;
reg   [31:0] hidden2_bias_d0;
reg   [5:0] outputs_bias_address0;
reg    outputs_bias_ce0;
reg    outputs_bias_we0;
reg   [31:0] outputs_bias_d0;
reg   [15:0] hidden1_matrix_address0;
reg    hidden1_matrix_ce0;
reg    hidden1_matrix_we0;
reg   [31:0] hidden1_matrix_d0;
wire   [31:0] hidden1_matrix_q0;
reg   [15:0] hidden2_matrix_address0;
reg    hidden2_matrix_ce0;
reg    hidden2_matrix_we0;
reg   [31:0] hidden2_matrix_d0;
wire   [31:0] hidden2_matrix_q0;
reg   [13:0] outputs_matrix_address0;
reg    outputs_matrix_ce0;
reg    outputs_matrix_we0;
reg   [31:0] outputs_matrix_d0;
wire   [31:0] outputs_matrix_q0;
reg   [7:0] moving_mean1_address0;
reg    moving_mean1_ce0;
reg    moving_mean1_we0;
reg   [31:0] moving_mean1_d0;
reg   [7:0] moving_var1_address0;
reg    moving_var1_ce0;
reg    moving_var1_we0;
reg   [31:0] moving_var1_d0;
reg   [7:0] gamma1_address0;
reg    gamma1_ce0;
reg    gamma1_we0;
reg   [31:0] gamma1_d0;
reg   [7:0] beta1_address0;
reg    beta1_ce0;
reg    beta1_we0;
reg   [31:0] beta1_d0;
reg   [7:0] moving_mean2_address0;
reg    moving_mean2_ce0;
reg    moving_mean2_we0;
reg   [31:0] moving_mean2_d0;
reg   [7:0] moving_var2_address0;
reg    moving_var2_ce0;
reg    moving_var2_we0;
reg   [31:0] moving_var2_d0;
reg   [7:0] gamma2_address0;
reg    gamma2_ce0;
reg    gamma2_we0;
reg   [31:0] gamma2_d0;
reg   [7:0] beta2_address0;
reg    beta2_ce0;
reg    beta2_we0;
reg   [31:0] beta2_d0;
wire    grp_dot_product_2_fu_1255_ap_start;
wire    grp_dot_product_2_fu_1255_ap_idle;
wire   [15:0] grp_dot_product_2_fu_1255_a_address0;
wire    grp_dot_product_2_fu_1255_a_ce0;
wire   [7:0] grp_dot_product_2_fu_1255_b_address0;
wire    grp_dot_product_2_fu_1255_b_ce0;
wire    grp_dot_product_1_fu_1263_ap_start;
wire    grp_dot_product_1_fu_1263_ap_idle;
wire   [15:0] grp_dot_product_1_fu_1263_a_address0;
wire    grp_dot_product_1_fu_1263_a_ce0;
wire   [7:0] grp_dot_product_1_fu_1263_b_address0;
wire    grp_dot_product_1_fu_1263_b_ce0;
wire    grp_dot_product_fu_1271_ap_start;
wire    grp_dot_product_fu_1271_ap_idle;
wire   [13:0] grp_dot_product_fu_1271_a_address0;
wire    grp_dot_product_fu_1271_a_ce0;
wire   [7:0] grp_dot_product_fu_1271_b_address0;
wire    grp_dot_product_fu_1271_b_ce0;
reg   [7:0] phi_ln60_reg_710;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln60_fu_1370_p2;
reg   [7:0] phi_ln61_reg_721;
wire   [0:0] icmp_ln61_fu_1387_p2;
reg   [7:0] phi_ln62_reg_732;
wire   [0:0] icmp_ln62_fu_1404_p2;
reg   [5:0] phi_ln63_reg_743;
wire   [0:0] icmp_ln63_fu_1421_p2;
reg   [7:0] phi_ln64_reg_754;
wire   [0:0] icmp_ln64_fu_1438_p2;
reg   [7:0] phi_ln65_reg_765;
wire   [0:0] icmp_ln65_fu_1455_p2;
reg   [5:0] phi_ln66_reg_776;
wire   [0:0] icmp_ln66_fu_1472_p2;
reg   [7:0] phi_ln67_reg_787;
wire   [0:0] icmp_ln67_fu_1503_p2;
wire   [0:0] icmp_ln67_1_fu_1509_p2;
reg   [7:0] phi_ln67_1_reg_799;
reg   [7:0] phi_ln68_reg_810;
wire   [0:0] icmp_ln68_fu_1540_p2;
wire   [0:0] icmp_ln68_1_fu_1546_p2;
reg   [7:0] phi_ln68_1_reg_822;
reg   [5:0] phi_ln69_reg_833;
wire   [0:0] icmp_ln69_fu_1577_p2;
wire   [0:0] icmp_ln69_1_fu_1583_p2;
reg   [7:0] phi_ln69_1_reg_845;
reg   [7:0] phi_ln70_reg_856;
wire   [0:0] icmp_ln70_fu_1600_p2;
reg   [7:0] phi_ln71_reg_867;
wire   [0:0] icmp_ln71_fu_1617_p2;
reg   [7:0] phi_ln72_reg_878;
wire   [0:0] icmp_ln72_fu_1634_p2;
reg   [7:0] phi_ln73_reg_889;
wire   [0:0] icmp_ln73_fu_1651_p2;
reg   [7:0] phi_ln75_reg_900;
wire   [0:0] icmp_ln75_fu_1668_p2;
reg   [7:0] phi_ln76_reg_911;
wire   [0:0] icmp_ln76_fu_1685_p2;
reg   [7:0] phi_ln77_reg_922;
wire   [0:0] icmp_ln77_fu_1702_p2;
reg   [7:0] phi_ln78_reg_933;
wire   [0:0] icmp_ln78_fu_1719_p2;
reg   [8:0] i_0_reg_944;
reg   [8:0] j_0_reg_955;
reg   [8:0] i_1_reg_966;
reg   [8:0] j_1_reg_977;
reg   [6:0] i_2_reg_988;
reg   [8:0] j_2_reg_999;
reg   [8:0] i_3_reg_1010;
reg   [8:0] i_4_reg_1021;
reg   [6:0] i_5_reg_1032;
reg   [8:0] i_6_reg_1043;
reg   [8:0] i_7_reg_1054;
reg   [8:0] i_8_reg_1065;
reg   [8:0] i_9_reg_1076;
reg   [8:0] i_10_reg_1087;
reg   [8:0] i_11_reg_1098;
reg   [8:0] i_12_reg_1109;
reg   [8:0] i_13_reg_1120;
reg   [19:0] j_3_reg_1131;
reg   [8:0] i_14_reg_1142;
wire   [0:0] icmp_ln156_fu_2062_p2;
reg   [8:0] i_15_reg_1153;
wire    ap_CS_fsm_state45;
reg   [8:0] i_16_reg_1165;
wire    ap_CS_fsm_state53;
wire   [0:0] icmp_ln164_fu_2091_p2;
reg   [8:0] i_17_reg_1176;
wire    ap_CS_fsm_state76;
reg   [8:0] i_18_reg_1187;
wire    ap_CS_fsm_state79;
reg   [8:0] i_19_reg_1199;
wire    ap_CS_fsm_state87;
wire   [0:0] icmp_ln177_fu_2196_p2;
reg   [8:0] i_20_reg_1210;
wire    ap_CS_fsm_state110;
reg   [6:0] i_21_reg_1221;
wire    ap_CS_fsm_state113;
reg   [6:0] i_22_reg_1233;
wire    ap_CS_fsm_state120;
wire   [0:0] icmp_ln190_fu_2301_p2;
reg   [6:0] i_23_reg_1244;
reg    grp_dot_product_2_fu_1255_ap_start_reg;
reg    grp_dot_product_1_fu_1263_ap_start_reg;
reg    grp_dot_product_fu_1271_ap_start_reg;
wire   [63:0] zext_ln60_fu_1365_p1;
wire   [63:0] zext_ln61_fu_1382_p1;
wire   [63:0] zext_ln62_fu_1399_p1;
wire   [63:0] zext_ln63_fu_1416_p1;
wire   [63:0] zext_ln64_fu_1433_p1;
wire   [63:0] zext_ln65_fu_1450_p1;
wire   [63:0] zext_ln66_fu_1467_p1;
wire   [63:0] zext_ln67_fu_1498_p1;
wire   [63:0] zext_ln68_fu_1535_p1;
wire   [63:0] zext_ln69_fu_1572_p1;
wire   [63:0] zext_ln70_fu_1595_p1;
wire   [63:0] zext_ln71_fu_1612_p1;
wire   [63:0] zext_ln72_fu_1629_p1;
wire   [63:0] zext_ln73_fu_1646_p1;
wire   [63:0] zext_ln75_fu_1663_p1;
wire   [63:0] zext_ln76_fu_1680_p1;
wire   [63:0] zext_ln77_fu_1697_p1;
wire   [63:0] zext_ln78_fu_1714_p1;
wire   [63:0] zext_ln90_1_fu_1770_p1;
wire   [63:0] zext_ln96_1_fu_1820_p1;
wire   [63:0] zext_ln102_1_fu_1870_p1;
wire   [63:0] zext_ln107_fu_1887_p1;
wire   [63:0] zext_ln111_fu_1904_p1;
wire   [63:0] zext_ln115_fu_1921_p1;
wire   [63:0] zext_ln119_fu_1938_p1;
wire   [63:0] zext_ln123_fu_1955_p1;
wire   [63:0] zext_ln127_fu_1972_p1;
wire   [63:0] zext_ln131_fu_1989_p1;
wire   [63:0] zext_ln135_fu_2006_p1;
wire   [63:0] zext_ln139_fu_2023_p1;
wire   [63:0] zext_ln143_fu_2040_p1;
wire   [63:0] zext_ln147_fu_2057_p1;
wire   [63:0] zext_ln160_fu_2086_p1;
wire   [63:0] zext_ln165_fu_2103_p1;
wire   [63:0] zext_ln168_fu_2120_p1;
wire   [63:0] zext_ln178_fu_2208_p1;
wire   [63:0] zext_ln181_fu_2225_p1;
wire   [63:0] zext_ln191_fu_2313_p1;
wire   [63:0] zext_ln194_fu_2330_p1;
wire   [63:0] zext_ln201_fu_2348_p1;
wire   [31:0] select_ln16_fu_2168_p3;
wire   [31:0] select_ln16_1_fu_2273_p3;
reg   [31:0] grp_fu_1279_p0;
reg   [31:0] grp_fu_1279_p1;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state116;
reg   [31:0] grp_fu_1283_p0;
reg   [31:0] grp_fu_1283_p1;
reg   [31:0] grp_fu_1287_p1;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state86;
wire   [15:0] tmp_fu_1490_p3;
wire   [15:0] tmp_7_fu_1527_p3;
wire   [13:0] tmp_8_fu_1564_p3;
wire   [16:0] tmp_258_fu_1737_p3;
wire   [17:0] zext_ln90_fu_1761_p1;
wire   [17:0] add_ln90_fu_1765_p2;
wire   [16:0] tmp_259_fu_1787_p3;
wire   [17:0] zext_ln96_fu_1811_p1;
wire   [17:0] add_ln96_fu_1815_p2;
wire   [14:0] tmp_260_fu_1837_p3;
wire   [15:0] zext_ln102_fu_1861_p1;
wire   [15:0] add_ln102_fu_1865_p2;
wire   [31:0] bitcast_ln16_fu_2126_p1;
wire   [7:0] tmp_1_fu_2130_p4;
wire   [22:0] trunc_ln16_fu_2140_p1;
wire   [0:0] icmp_ln16_1_fu_2150_p2;
wire   [0:0] icmp_ln16_fu_2144_p2;
wire   [0:0] or_ln16_fu_2156_p2;
wire   [0:0] grp_fu_1295_p2;
wire   [0:0] and_ln16_fu_2162_p2;
wire   [31:0] bitcast_ln16_1_fu_2231_p1;
wire   [7:0] tmp_3_fu_2235_p4;
wire   [22:0] trunc_ln16_1_fu_2245_p1;
wire   [0:0] icmp_ln16_3_fu_2255_p2;
wire   [0:0] icmp_ln16_2_fu_2249_p2;
wire   [0:0] or_ln16_1_fu_2261_p2;
wire   [0:0] and_ln16_1_fu_2267_p2;
reg   [1:0] grp_fu_1279_opcode;
reg   [122:0] ap_NS_fsm;
wire    regslice_both_S_AXIS_V_data_U_apdone_blk;
wire   [31:0] S_AXIS_TDATA_int;
wire    S_AXIS_TVALID_int;
reg    S_AXIS_TREADY_int;
wire    regslice_both_S_AXIS_V_data_U_ack_in;
wire    regslice_both_w1_S_AXIS_V_last_U_apdone_blk;
wire    S_AXIS_TLAST_int;
wire    regslice_both_w1_S_AXIS_V_last_U_vld_out;
wire    regslice_both_w1_S_AXIS_V_last_U_ack_in;
reg    M_AXIS_TVALID_int;
wire    M_AXIS_TREADY_int;
wire    regslice_both_M_AXIS_V_data_U_vld_out;
wire    regslice_both_w1_M_AXIS_V_last_U_apdone_blk;
wire    M_AXIS_TLAST_int;
wire    regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy;
wire    regslice_both_w1_M_AXIS_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 123'd1;
#0 grp_dot_product_2_fu_1255_ap_start_reg = 1'b0;
#0 grp_dot_product_1_fu_1263_ap_start_reg = 1'b0;
#0 grp_dot_product_fu_1271_ap_start_reg = 1'b0;
end

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
inputs_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inputs_address0),
    .ce0(inputs_ce0),
    .we0(inputs_we0),
    .d0(inputs_d0),
    .q0(inputs_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
hidden1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden1_address0),
    .ce0(hidden1_ce0),
    .we0(hidden1_we0),
    .d0(hidden1_d0),
    .q0(hidden1_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
hidden2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden2_address0),
    .ce0(hidden2_ce0),
    .we0(hidden2_we0),
    .d0(hidden2_d0),
    .q0(hidden2_q0)
);

MLP_1_outputs #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
outputs_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(outputs_address0),
    .ce0(outputs_ce0),
    .we0(outputs_we0),
    .d0(outputs_d0),
    .q0(outputs_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
hidden1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden1_bias_address0),
    .ce0(hidden1_bias_ce0),
    .we0(hidden1_bias_we0),
    .d0(hidden1_bias_d0),
    .q0(hidden1_bias_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
hidden2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden2_bias_address0),
    .ce0(hidden2_bias_ce0),
    .we0(hidden2_bias_we0),
    .d0(hidden2_bias_d0),
    .q0(hidden2_bias_q0)
);

MLP_1_outputs #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
outputs_bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(outputs_bias_address0),
    .ce0(outputs_bias_ce0),
    .we0(outputs_bias_we0),
    .d0(outputs_bias_d0),
    .q0(outputs_bias_q0)
);

MLP_1_hidden1_matdEe #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
hidden1_matrix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden1_matrix_address0),
    .ce0(hidden1_matrix_ce0),
    .we0(hidden1_matrix_we0),
    .d0(hidden1_matrix_d0),
    .q0(hidden1_matrix_q0)
);

MLP_1_hidden1_matdEe #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
hidden2_matrix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden2_matrix_address0),
    .ce0(hidden2_matrix_ce0),
    .we0(hidden2_matrix_we0),
    .d0(hidden2_matrix_d0),
    .q0(hidden2_matrix_q0)
);

MLP_1_outputs_matfYi #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
outputs_matrix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(outputs_matrix_address0),
    .ce0(outputs_matrix_ce0),
    .we0(outputs_matrix_we0),
    .d0(outputs_matrix_d0),
    .q0(outputs_matrix_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
moving_mean1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(moving_mean1_address0),
    .ce0(moving_mean1_ce0),
    .we0(moving_mean1_we0),
    .d0(moving_mean1_d0),
    .q0(moving_mean1_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
moving_var1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(moving_var1_address0),
    .ce0(moving_var1_ce0),
    .we0(moving_var1_we0),
    .d0(moving_var1_d0),
    .q0(moving_var1_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
gamma1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(gamma1_address0),
    .ce0(gamma1_ce0),
    .we0(gamma1_we0),
    .d0(gamma1_d0),
    .q0(gamma1_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
beta1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(beta1_address0),
    .ce0(beta1_ce0),
    .we0(beta1_we0),
    .d0(beta1_d0),
    .q0(beta1_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
moving_mean2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(moving_mean2_address0),
    .ce0(moving_mean2_ce0),
    .we0(moving_mean2_we0),
    .d0(moving_mean2_d0),
    .q0(moving_mean2_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
moving_var2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(moving_var2_address0),
    .ce0(moving_var2_ce0),
    .we0(moving_var2_we0),
    .d0(moving_var2_d0),
    .q0(moving_var2_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
gamma2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(gamma2_address0),
    .ce0(gamma2_ce0),
    .we0(gamma2_we0),
    .d0(gamma2_d0),
    .q0(gamma2_q0)
);

MLP_1_inputs #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
beta2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(beta2_address0),
    .ce0(beta2_ce0),
    .we0(beta2_we0),
    .d0(beta2_d0),
    .q0(beta2_q0)
);

dot_product_2 grp_dot_product_2_fu_1255(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dot_product_2_fu_1255_ap_start),
    .ap_done(grp_dot_product_2_fu_1255_ap_done),
    .ap_idle(grp_dot_product_2_fu_1255_ap_idle),
    .ap_ready(grp_dot_product_2_fu_1255_ap_ready),
    .a_address0(grp_dot_product_2_fu_1255_a_address0),
    .a_ce0(grp_dot_product_2_fu_1255_a_ce0),
    .a_q0(hidden1_matrix_q0),
    .a_offset(i_15_reg_1153),
    .b_address0(grp_dot_product_2_fu_1255_b_address0),
    .b_ce0(grp_dot_product_2_fu_1255_b_ce0),
    .b_q0(inputs_q0),
    .ap_return(grp_dot_product_2_fu_1255_ap_return)
);

dot_product_1 grp_dot_product_1_fu_1263(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dot_product_1_fu_1263_ap_start),
    .ap_done(grp_dot_product_1_fu_1263_ap_done),
    .ap_idle(grp_dot_product_1_fu_1263_ap_idle),
    .ap_ready(grp_dot_product_1_fu_1263_ap_ready),
    .a_address0(grp_dot_product_1_fu_1263_a_address0),
    .a_ce0(grp_dot_product_1_fu_1263_a_ce0),
    .a_q0(hidden2_matrix_q0),
    .a_offset(i_18_reg_1187),
    .b_address0(grp_dot_product_1_fu_1263_b_address0),
    .b_ce0(grp_dot_product_1_fu_1263_b_ce0),
    .b_q0(hidden1_q0),
    .ap_return(grp_dot_product_1_fu_1263_ap_return)
);

dot_product grp_dot_product_fu_1271(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dot_product_fu_1271_ap_start),
    .ap_done(grp_dot_product_fu_1271_ap_done),
    .ap_idle(grp_dot_product_fu_1271_ap_idle),
    .ap_ready(grp_dot_product_fu_1271_ap_ready),
    .a_address0(grp_dot_product_fu_1271_a_address0),
    .a_ce0(grp_dot_product_fu_1271_a_ce0),
    .a_q0(outputs_matrix_q0),
    .a_offset(i_21_reg_1221),
    .b_address0(grp_dot_product_fu_1271_b_address0),
    .b_ce0(grp_dot_product_fu_1271_b_ce0),
    .b_q0(hidden2_q0),
    .ap_return(grp_dot_product_fu_1271_ap_return)
);

MLP_1_faddfsub_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MLP_1_faddfsub_32g8j_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1279_p0),
    .din1(grp_fu_1279_p1),
    .opcode(grp_fu_1279_opcode),
    .ce(1'b1),
    .dout(grp_fu_1279_p2)
);

MLP_1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MLP_1_fadd_32ns_3bkb_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1283_p0),
    .din1(grp_fu_1283_p1),
    .ce(1'b1),
    .dout(grp_fu_1283_p2)
);

MLP_1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MLP_1_fmul_32ns_3cud_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_1338),
    .din1(grp_fu_1287_p1),
    .ce(1'b1),
    .dout(grp_fu_1287_p2)
);

MLP_1_fdiv_32ns_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
MLP_1_fdiv_32ns_3hbi_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_1324),
    .din1(reg_1333),
    .ce(1'b1),
    .dout(grp_fu_1291_p2)
);

MLP_1_fcmp_32ns_3ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
MLP_1_fcmp_32ns_3ibs_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_1324),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_1295_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_S_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TDATA),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_data_U_ack_in),
    .data_out(S_AXIS_TDATA_int),
    .vld_out(S_AXIS_TVALID_int),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_S_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_S_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TLAST),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_w1_S_AXIS_V_last_U_ack_in),
    .data_out(S_AXIS_TLAST_int),
    .vld_out(regslice_both_w1_S_AXIS_V_last_U_vld_out),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_w1_S_AXIS_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_M_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(outputs_q0),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(M_AXIS_TREADY_int),
    .data_out(M_AXIS_TDATA),
    .vld_out(regslice_both_M_AXIS_V_data_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_M_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TLAST_int),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy),
    .data_out(M_AXIS_TLAST),
    .vld_out(regslice_both_w1_M_AXIS_V_last_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_w1_M_AXIS_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dot_product_1_fu_1263_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln177_fu_2196_p2 == 1'd0))) begin
            grp_dot_product_1_fu_1263_ap_start_reg <= 1'b1;
        end else if ((grp_dot_product_1_fu_1263_ap_ready == 1'b1)) begin
            grp_dot_product_1_fu_1263_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dot_product_2_fu_1255_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln164_fu_2091_p2 == 1'd0))) begin
            grp_dot_product_2_fu_1255_ap_start_reg <= 1'b1;
        end else if ((grp_dot_product_2_fu_1255_ap_ready == 1'b1)) begin
            grp_dot_product_2_fu_1255_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dot_product_fu_1271_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state111) & (icmp_ln190_fu_2301_p2 == 1'd0))) begin
            grp_dot_product_fu_1271_ap_start_reg <= 1'b1;
        end else if ((grp_dot_product_fu_1271_ap_ready == 1'b1)) begin
            grp_dot_product_fu_1271_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_1719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        i_0_reg_944 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln88_fu_1749_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln88_fu_1749_p2 == 1'd1))) begin
        i_0_reg_944 <= i_reg_2530;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln129_fu_1977_p2 == 1'd0)) & (icmp_ln129_fu_1977_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
        i_10_reg_1087 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln133_fu_1994_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln133_fu_1994_p2 == 1'd0))) begin
        i_10_reg_1087 <= i_54_fu_2000_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln133_fu_1994_p2 == 1'd0)) & (icmp_ln133_fu_1994_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        i_11_reg_1098 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln137_fu_2011_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state37) & (icmp_ln137_fu_2011_p2 == 1'd0))) begin
        i_11_reg_1098 <= i_55_fu_2017_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln137_fu_2011_p2 == 1'd0)) & (icmp_ln137_fu_2011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        i_12_reg_1109 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln141_fu_2028_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln141_fu_2028_p2 == 1'd0))) begin
        i_12_reg_1109 <= i_56_fu_2034_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln141_fu_2028_p2 == 1'd0)) & (icmp_ln141_fu_2028_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        i_13_reg_1120 <= 9'd0;
    end else if ((~(((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd1)) | ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln145_fu_2045_p2 == 1'd0))) begin
        i_13_reg_1120 <= i_57_fu_2051_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41) & (icmp_ln156_fu_2062_p2 == 1'd0))) begin
        i_14_reg_1142 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln158_fu_2074_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state42) & (icmp_ln158_fu_2074_p2 == 1'd0))) begin
        i_14_reg_1142 <= i_58_fu_2080_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln158_fu_2074_p2 == 1'd0)) & (icmp_ln158_fu_2074_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        i_15_reg_1153 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        i_15_reg_1153 <= i_59_reg_2707;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_2091_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        i_16_reg_1165 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        i_16_reg_1165 <= i_60_reg_2720;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln167_fu_2108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        i_17_reg_1176 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        i_17_reg_1176 <= i_61_reg_2743;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln172_fu_2177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        i_18_reg_1187 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        i_18_reg_1187 <= i_62_reg_2802;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_2196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        i_19_reg_1199 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        i_19_reg_1199 <= i_63_reg_2815;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_1725_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        i_1_reg_966 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln94_fu_1799_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln94_fu_1799_p2 == 1'd1))) begin
        i_1_reg_966 <= i_24_reg_2551;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln180_fu_2213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
        i_20_reg_1210 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        i_20_reg_1210 <= i_64_reg_2838;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_fu_2282_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
        i_21_reg_1221 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        i_21_reg_1221 <= i_65_reg_2897;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_2301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state111))) begin
        i_22_reg_1233 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        i_22_reg_1233 <= i_66_reg_2910;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_2318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state114))) begin
        i_23_reg_1244 <= 7'd0;
    end else if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state123))) begin
        i_23_reg_1244 <= i_67_reg_2933;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_1775_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        i_2_reg_988 <= 7'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln100_fu_1849_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln100_fu_1849_p2 == 1'd1))) begin
        i_2_reg_988 <= i_26_reg_2572;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_1825_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        i_3_reg_1010 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln105_fu_1875_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln105_fu_1875_p2 == 1'd0))) begin
        i_3_reg_1010 <= i_47_fu_1881_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln105_fu_1875_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln105_fu_1875_p2 == 1'd1))) begin
        i_4_reg_1021 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln109_fu_1892_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state30) & (icmp_ln109_fu_1892_p2 == 1'd0))) begin
        i_4_reg_1021 <= i_48_fu_1898_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln109_fu_1892_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state30) & (icmp_ln109_fu_1892_p2 == 1'd1))) begin
        i_5_reg_1032 <= 7'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln113_fu_1909_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln113_fu_1909_p2 == 1'd0))) begin
        i_5_reg_1032 <= i_49_fu_1915_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln113_fu_1909_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln113_fu_1909_p2 == 1'd1))) begin
        i_6_reg_1043 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln117_fu_1926_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state32) & (icmp_ln117_fu_1926_p2 == 1'd0))) begin
        i_6_reg_1043 <= i_50_fu_1932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln117_fu_1926_p2 == 1'd0)) & (icmp_ln117_fu_1926_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        i_7_reg_1054 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln121_fu_1943_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln121_fu_1943_p2 == 1'd0))) begin
        i_7_reg_1054 <= i_51_fu_1949_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln121_fu_1943_p2 == 1'd0)) & (icmp_ln121_fu_1943_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        i_8_reg_1065 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln125_fu_1960_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state34) & (icmp_ln125_fu_1960_p2 == 1'd0))) begin
        i_8_reg_1065 <= i_52_fu_1966_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln125_fu_1960_p2 == 1'd0)) & (icmp_ln125_fu_1960_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        i_9_reg_1076 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln129_fu_1977_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state35) & (icmp_ln129_fu_1977_p2 == 1'd0))) begin
        i_9_reg_1076 <= i_53_fu_1983_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln87_fu_1725_p2 == 1'd0))) begin
        j_0_reg_955 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln88_fu_1749_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln88_fu_1749_p2 == 1'd0))) begin
        j_0_reg_955 <= j_fu_1755_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln93_fu_1775_p2 == 1'd0))) begin
        j_1_reg_977 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln94_fu_1799_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln94_fu_1799_p2 == 1'd0))) begin
        j_1_reg_977 <= j_4_fu_1805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln99_fu_1825_p2 == 1'd0))) begin
        j_2_reg_999 <= 9'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln100_fu_1849_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln100_fu_1849_p2 == 1'd0))) begin
        j_2_reg_999 <= j_5_fu_1855_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln200_fu_2336_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state121))) begin
        j_3_reg_1131 <= j_6_reg_2691;
    end else if (((1'b1 == S_AXIS_TVALID_int) & (1'b1 == ap_CS_fsm_state40))) begin
        j_3_reg_1131 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln60_fu_1370_p2 == 1'd0))) begin
        phi_ln60_reg_710 <= add_ln60_fu_1359_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        phi_ln60_reg_710 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_1370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln61_reg_721 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln61_fu_1387_p2 == 1'd0))) begin
        phi_ln61_reg_721 <= add_ln61_fu_1376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_1387_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln62_reg_732 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln62_fu_1404_p2 == 1'd0))) begin
        phi_ln62_reg_732 <= add_ln62_fu_1393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_1404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln63_reg_743 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln63_fu_1421_p2 == 1'd0))) begin
        phi_ln63_reg_743 <= add_ln63_fu_1410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_1421_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln64_reg_754 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln64_fu_1438_p2 == 1'd0))) begin
        phi_ln64_reg_754 <= add_ln64_fu_1427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_1438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_ln65_reg_765 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln65_fu_1455_p2 == 1'd0))) begin
        phi_ln65_reg_765 <= add_ln65_fu_1444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_1455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_ln66_reg_776 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln66_fu_1472_p2 == 1'd0))) begin
        phi_ln66_reg_776 <= add_ln66_fu_1461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln67_fu_1503_p2 == 1'd0))) begin
        phi_ln67_1_reg_799 <= add_ln67_1_fu_1484_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_ln67_1_reg_799 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_1472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        phi_ln67_reg_787 <= 8'd0;
    end else if (((icmp_ln67_fu_1503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln67_1_fu_1509_p2 == 1'd0))) begin
        phi_ln67_reg_787 <= add_ln67_reg_2415;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln68_fu_1540_p2 == 1'd0))) begin
        phi_ln68_1_reg_822 <= add_ln68_1_fu_1521_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_ln68_1_reg_822 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_1_fu_1509_p2 == 1'd1) & (icmp_ln67_fu_1503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        phi_ln68_reg_810 <= 8'd0;
    end else if (((icmp_ln68_fu_1540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln68_1_fu_1546_p2 == 1'd0))) begin
        phi_ln68_reg_810 <= add_ln68_reg_2431;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln69_fu_1577_p2 == 1'd0))) begin
        phi_ln69_1_reg_845 <= add_ln69_1_fu_1558_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln69_1_reg_845 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_1_fu_1546_p2 == 1'd1) & (icmp_ln68_fu_1540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        phi_ln69_reg_833 <= 6'd0;
    end else if (((icmp_ln69_fu_1577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln69_1_fu_1583_p2 == 1'd0))) begin
        phi_ln69_reg_833 <= add_ln69_reg_2447;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_1_fu_1583_p2 == 1'd1) & (icmp_ln69_fu_1577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        phi_ln70_reg_856 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln70_fu_1600_p2 == 1'd0))) begin
        phi_ln70_reg_856 <= add_ln70_fu_1589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_1600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        phi_ln71_reg_867 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln71_fu_1617_p2 == 1'd0))) begin
        phi_ln71_reg_867 <= add_ln71_fu_1606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_1617_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        phi_ln72_reg_878 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln72_fu_1634_p2 == 1'd0))) begin
        phi_ln72_reg_878 <= add_ln72_fu_1623_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_1634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        phi_ln73_reg_889 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln73_fu_1651_p2 == 1'd0))) begin
        phi_ln73_reg_889 <= add_ln73_fu_1640_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_1651_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        phi_ln75_reg_900 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln75_fu_1668_p2 == 1'd0))) begin
        phi_ln75_reg_900 <= add_ln75_fu_1657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_1668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        phi_ln76_reg_911 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln76_fu_1685_p2 == 1'd0))) begin
        phi_ln76_reg_911 <= add_ln76_fu_1674_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_1685_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        phi_ln77_reg_922 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln77_fu_1702_p2 == 1'd0))) begin
        phi_ln77_reg_922 <= add_ln77_fu_1691_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_1702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        phi_ln78_reg_933 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln78_fu_1719_p2 == 1'd0))) begin
        phi_ln78_reg_933 <= add_ln78_fu_1708_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln67_reg_2415 <= add_ln67_fu_1478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln68_reg_2431 <= add_ln68_fu_1515_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln69_reg_2447 <= add_ln69_fu_1552_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        beta1_load_reg_2794 <= beta1_q0;
        gamma1_load_reg_2789 <= gamma1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        beta2_load_reg_2889 <= beta2_q0;
        gamma2_load_reg_2884 <= gamma2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln167_fu_2108_p2 == 1'd0))) begin
        hidden1_addr_2_reg_2725 <= zext_ln168_fu_2120_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) & (icmp_ln172_fu_2177_p2 == 1'd0))) begin
        hidden1_addr_3_reg_2754 <= zext_ln173_fu_2189_p1;
        zext_ln173_reg_2748[8 : 0] <= zext_ln173_fu_2189_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        hidden1_bias_load_reg_2735 <= hidden1_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state80) & (icmp_ln180_fu_2213_p2 == 1'd0))) begin
        hidden2_addr_2_reg_2820 <= zext_ln181_fu_2225_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state88) & (icmp_ln185_fu_2282_p2 == 1'd0))) begin
        hidden2_addr_3_reg_2849 <= zext_ln186_fu_2294_p1;
        zext_ln186_reg_2843[8 : 0] <= zext_ln186_fu_2294_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        hidden2_bias_load_reg_2830 <= hidden2_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_24_reg_2551 <= i_24_fu_1781_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_26_reg_2572 <= i_26_fu_1831_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_59_reg_2707 <= i_59_fu_2097_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        i_60_reg_2720 <= i_60_fu_2114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        i_61_reg_2743 <= i_61_fu_2183_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        i_62_reg_2802 <= i_62_fu_2202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        i_63_reg_2815 <= i_63_fu_2219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        i_64_reg_2838 <= i_64_fu_2288_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        i_65_reg_2897 <= i_65_fu_2307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        i_66_reg_2910 <= i_66_fu_2324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        i_67_reg_2933 <= i_67_fu_2342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_reg_2530 <= i_fu_1731_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41))) begin
        j_6_reg_2691 <= j_6_fu_2068_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        moving_mean1_load_reg_2769 <= moving_mean1_q0;
        moving_var1_load_reg_2774 <= moving_var1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        moving_mean2_load_reg_2864 <= moving_mean2_q0;
        moving_var2_load_reg_2869 <= moving_var2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state114) & (icmp_ln193_fu_2318_p2 == 1'd0))) begin
        outputs_addr_2_reg_2915 <= zext_ln194_fu_2330_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        outputs_bias_load_reg_2925 <= outputs_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state47))) begin
        reg_1319 <= hidden1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state51))) begin
        reg_1324 <= grp_fu_1279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state59))) begin
        reg_1333 <= grp_fu_1283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state68))) begin
        reg_1338 <= grp_fu_1291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state71))) begin
        reg_1343 <= grp_fu_1287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state81))) begin
        reg_1348 <= hidden2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state115) | ((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state122)))) begin
        reg_1353 <= outputs_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dot_product_2_fu_1255_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        tmp6_reg_2712 <= grp_dot_product_2_fu_1255_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dot_product_1_fu_1263_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
        tmp_5_reg_2807 <= grp_dot_product_1_fu_1263_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd1)) | ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd0))) & (icmp_ln145_fu_2045_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        tmp_data_15_reg_2678 <= S_AXIS_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == S_AXIS_TVALID_int) & (1'b1 == ap_CS_fsm_state40))) begin
        tmp_data_16_reg_2683 <= S_AXIS_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state121) & (icmp_ln200_fu_2336_p2 == 1'd0))) begin
        tmp_last_reg_2943 <= tmp_last_fu_2353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dot_product_fu_1271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state112))) begin
        tmp_s_reg_2902 <= grp_dot_product_fu_1271_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln99_fu_1825_p2 == 1'd0))) begin
        zext_ln100_reg_2577[14 : 8] <= zext_ln100_fu_1845_p1[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln87_fu_1725_p2 == 1'd0))) begin
        zext_ln88_reg_2535[16 : 8] <= zext_ln88_fu_1745_p1[16 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln93_fu_1775_p2 == 1'd0))) begin
        zext_ln94_reg_2556[16 : 8] <= zext_ln94_fu_1795_p1[16 : 8];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state122))) begin
        M_AXIS_TVALID_int = 1'b1;
    end else begin
        M_AXIS_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state42) & (icmp_ln158_fu_2074_p2 == 1'd0)) | ((icmp_ln145_fu_2045_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)) | ((1'b1 == ap_CS_fsm_state39) & (icmp_ln145_fu_2045_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state38) & (icmp_ln141_fu_2028_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state37) & (icmp_ln137_fu_2011_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state36) & (icmp_ln133_fu_1994_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state35) & (icmp_ln129_fu_1977_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state34) & (icmp_ln125_fu_1960_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state33) & (icmp_ln121_fu_1943_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state32) & (icmp_ln117_fu_1926_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state31) & (icmp_ln113_fu_1909_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state30) & (icmp_ln109_fu_1892_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state29) & (icmp_ln105_fu_1875_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln100_fu_1849_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state26) & (icmp_ln94_fu_1799_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state24) & (icmp_ln88_fu_1749_p2 == 1'd0)))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_S_AXIS_V_data_U_ack_in == 1'b1) & (1'b1 == S_AXIS_TVALID))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln158_fu_2074_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state42) & (icmp_ln158_fu_2074_p2 == 1'd0)) | ((1'b1 == S_AXIS_TVALID_int) & (1'b1 == ap_CS_fsm_state40)) | (~(((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd1)) | ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd0))) & (icmp_ln145_fu_2045_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)) | (~(((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd1)) | ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln145_fu_2045_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln141_fu_2028_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln141_fu_2028_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln137_fu_2011_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state37) & (icmp_ln137_fu_2011_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln133_fu_1994_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln133_fu_1994_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln129_fu_1977_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state35) & (icmp_ln129_fu_1977_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln125_fu_1960_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state34) & (icmp_ln125_fu_1960_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln121_fu_1943_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln121_fu_1943_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln117_fu_1926_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state32) & (icmp_ln117_fu_1926_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln113_fu_1909_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln113_fu_1909_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln109_fu_1892_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state30) & (icmp_ln109_fu_1892_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln105_fu_1875_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln105_fu_1875_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln100_fu_1849_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln100_fu_1849_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln94_fu_1799_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln94_fu_1799_p2 == 1'd0)) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln88_fu_1749_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln88_fu_1749_p2 == 1'd0)))) begin
        S_AXIS_TREADY_int = 1'b1;
    end else begin
        S_AXIS_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        beta1_address0 = zext_ln173_reg_2748;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        beta1_address0 = zext_ln127_fu_1972_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        beta1_address0 = zext_ln73_fu_1646_p1;
    end else begin
        beta1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state18) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln125_fu_1960_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state34)))) begin
        beta1_ce0 = 1'b1;
    end else begin
        beta1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        beta1_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        beta1_d0 = 32'd0;
    end else begin
        beta1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln125_fu_1960_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state34) & (icmp_ln125_fu_1960_p2 == 1'd0)))) begin
        beta1_we0 = 1'b1;
    end else begin
        beta1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        beta2_address0 = zext_ln186_reg_2843;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        beta2_address0 = zext_ln143_fu_2040_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        beta2_address0 = zext_ln78_fu_1714_p1;
    end else begin
        beta2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state22) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln141_fu_2028_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state38)))) begin
        beta2_ce0 = 1'b1;
    end else begin
        beta2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        beta2_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        beta2_d0 = 32'd0;
    end else begin
        beta2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln141_fu_2028_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln141_fu_2028_p2 == 1'd0)))) begin
        beta2_we0 = 1'b1;
    end else begin
        beta2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        gamma1_address0 = zext_ln173_reg_2748;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        gamma1_address0 = zext_ln131_fu_1989_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        gamma1_address0 = zext_ln72_fu_1629_p1;
    end else begin
        gamma1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state17) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln129_fu_1977_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state35)))) begin
        gamma1_ce0 = 1'b1;
    end else begin
        gamma1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        gamma1_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        gamma1_d0 = 32'd0;
    end else begin
        gamma1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln129_fu_1977_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state35) & (icmp_ln129_fu_1977_p2 == 1'd0)))) begin
        gamma1_we0 = 1'b1;
    end else begin
        gamma1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        gamma2_address0 = zext_ln186_reg_2843;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        gamma2_address0 = zext_ln147_fu_2057_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        gamma2_address0 = zext_ln77_fu_1697_p1;
    end else begin
        gamma2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state21) | (~(((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd1)) | ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state39)))) begin
        gamma2_ce0 = 1'b1;
    end else begin
        gamma2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        gamma2_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        gamma2_d0 = 32'd0;
    end else begin
        gamma2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (~(((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd1)) | ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln145_fu_2045_p2 == 1'd0)))) begin
        gamma2_we0 = 1'b1;
    end else begin
        gamma2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state56))) begin
        grp_fu_1279_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state48))) begin
        grp_fu_1279_opcode = 2'd0;
    end else begin
        grp_fu_1279_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_fu_1279_p0 = reg_1353;
    end else if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state82))) begin
        grp_fu_1279_p0 = reg_1348;
    end else if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state72))) begin
        grp_fu_1279_p0 = reg_1343;
    end else if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state48))) begin
        grp_fu_1279_p0 = reg_1319;
    end else begin
        grp_fu_1279_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_fu_1279_p1 = outputs_bias_load_reg_2925;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_1279_p1 = beta2_load_reg_2889;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_1279_p1 = moving_mean2_load_reg_2864;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_1279_p1 = hidden2_bias_load_reg_2830;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_1279_p1 = beta1_load_reg_2794;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_1279_p1 = moving_mean1_load_reg_2769;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_1279_p1 = hidden1_bias_load_reg_2735;
    end else begin
        grp_fu_1279_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_1283_p0 = moving_var2_load_reg_2869;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_1283_p0 = moving_var1_load_reg_2774;
    end else begin
        grp_fu_1283_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_1283_p1 = tmp_data_16_reg_2683;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_1283_p1 = tmp_data_15_reg_2678;
    end else begin
        grp_fu_1283_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        grp_fu_1287_p1 = gamma2_load_reg_2884;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_1287_p1 = gamma1_load_reg_2789;
    end else begin
        grp_fu_1287_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        hidden1_address0 = hidden1_addr_3_reg_2754;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        hidden1_address0 = zext_ln173_fu_2189_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        hidden1_address0 = hidden1_addr_2_reg_2725;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        hidden1_address0 = zext_ln168_fu_2120_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        hidden1_address0 = zext_ln165_fu_2103_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hidden1_address0 = zext_ln61_fu_1382_p1;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        hidden1_address0 = grp_dot_product_1_fu_1263_b_address0;
    end else begin
        hidden1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        hidden1_bias_address0 = zext_ln168_fu_2120_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        hidden1_bias_address0 = zext_ln107_fu_1887_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hidden1_bias_address0 = zext_ln64_fu_1433_p1;
    end else begin
        hidden1_bias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state6) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln105_fu_1875_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state29)))) begin
        hidden1_bias_ce0 = 1'b1;
    end else begin
        hidden1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        hidden1_bias_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hidden1_bias_d0 = 32'd0;
    end else begin
        hidden1_bias_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln105_fu_1875_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln105_fu_1875_p2 == 1'd0)))) begin
        hidden1_bias_we0 = 1'b1;
    end else begin
        hidden1_bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45))) begin
        hidden1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        hidden1_ce0 = grp_dot_product_1_fu_1263_b_ce0;
    end else begin
        hidden1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        hidden1_d0 = reg_1324;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        hidden1_d0 = select_ln16_fu_2168_p3;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        hidden1_d0 = tmp6_reg_2712;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hidden1_d0 = 32'd0;
    end else begin
        hidden1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        hidden1_matrix_address0 = zext_ln90_1_fu_1770_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hidden1_matrix_address0 = zext_ln67_fu_1498_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        hidden1_matrix_address0 = grp_dot_product_2_fu_1255_a_address0;
    end else begin
        hidden1_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln88_fu_1749_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state24)))) begin
        hidden1_matrix_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        hidden1_matrix_ce0 = grp_dot_product_2_fu_1255_a_ce0;
    end else begin
        hidden1_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        hidden1_matrix_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hidden1_matrix_d0 = 32'd0;
    end else begin
        hidden1_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln88_fu_1749_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln88_fu_1749_p2 == 1'd0)))) begin
        hidden1_matrix_we0 = 1'b1;
    end else begin
        hidden1_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45))) begin
        hidden1_we0 = 1'b1;
    end else begin
        hidden1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        hidden2_address0 = hidden2_addr_3_reg_2849;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        hidden2_address0 = zext_ln186_fu_2294_p1;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        hidden2_address0 = hidden2_addr_2_reg_2820;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        hidden2_address0 = zext_ln181_fu_2225_p1;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        hidden2_address0 = zext_ln178_fu_2208_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hidden2_address0 = zext_ln62_fu_1399_p1;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        hidden2_address0 = grp_dot_product_fu_1271_b_address0;
    end else begin
        hidden2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        hidden2_bias_address0 = zext_ln181_fu_2225_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        hidden2_bias_address0 = zext_ln111_fu_1904_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hidden2_bias_address0 = zext_ln65_fu_1450_p1;
    end else begin
        hidden2_bias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state7) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln109_fu_1892_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state30)))) begin
        hidden2_bias_ce0 = 1'b1;
    end else begin
        hidden2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        hidden2_bias_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hidden2_bias_d0 = 32'd0;
    end else begin
        hidden2_bias_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln109_fu_1892_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state30) & (icmp_ln109_fu_1892_p2 == 1'd0)))) begin
        hidden2_bias_we0 = 1'b1;
    end else begin
        hidden2_bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state79))) begin
        hidden2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        hidden2_ce0 = grp_dot_product_fu_1271_b_ce0;
    end else begin
        hidden2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        hidden2_d0 = reg_1324;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        hidden2_d0 = select_ln16_1_fu_2273_p3;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        hidden2_d0 = tmp_5_reg_2807;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hidden2_d0 = 32'd0;
    end else begin
        hidden2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        hidden2_matrix_address0 = zext_ln96_1_fu_1820_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        hidden2_matrix_address0 = zext_ln68_fu_1535_p1;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        hidden2_matrix_address0 = grp_dot_product_1_fu_1263_a_address0;
    end else begin
        hidden2_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln94_fu_1799_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state26)))) begin
        hidden2_matrix_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        hidden2_matrix_ce0 = grp_dot_product_1_fu_1263_a_ce0;
    end else begin
        hidden2_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        hidden2_matrix_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        hidden2_matrix_d0 = 32'd0;
    end else begin
        hidden2_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln94_fu_1799_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln94_fu_1799_p2 == 1'd0)))) begin
        hidden2_matrix_we0 = 1'b1;
    end else begin
        hidden2_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state79))) begin
        hidden2_we0 = 1'b1;
    end else begin
        hidden2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        inputs_address0 = zext_ln160_fu_2086_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inputs_address0 = zext_ln60_fu_1365_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        inputs_address0 = grp_dot_product_2_fu_1255_b_address0;
    end else begin
        inputs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln158_fu_2074_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state42)))) begin
        inputs_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        inputs_ce0 = grp_dot_product_2_fu_1255_b_ce0;
    end else begin
        inputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        inputs_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inputs_d0 = 32'd0;
    end else begin
        inputs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln158_fu_2074_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state42) & (icmp_ln158_fu_2074_p2 == 1'd0)))) begin
        inputs_we0 = 1'b1;
    end else begin
        inputs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        moving_mean1_address0 = zext_ln173_fu_2189_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        moving_mean1_address0 = zext_ln119_fu_1938_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        moving_mean1_address0 = zext_ln70_fu_1595_p1;
    end else begin
        moving_mean1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state15) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln117_fu_1926_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state32)))) begin
        moving_mean1_ce0 = 1'b1;
    end else begin
        moving_mean1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        moving_mean1_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        moving_mean1_d0 = 32'd0;
    end else begin
        moving_mean1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln117_fu_1926_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state32) & (icmp_ln117_fu_1926_p2 == 1'd0)))) begin
        moving_mean1_we0 = 1'b1;
    end else begin
        moving_mean1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        moving_mean2_address0 = zext_ln186_fu_2294_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        moving_mean2_address0 = zext_ln135_fu_2006_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        moving_mean2_address0 = zext_ln75_fu_1663_p1;
    end else begin
        moving_mean2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state19) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln133_fu_1994_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state36)))) begin
        moving_mean2_ce0 = 1'b1;
    end else begin
        moving_mean2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        moving_mean2_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        moving_mean2_d0 = 32'd0;
    end else begin
        moving_mean2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln133_fu_1994_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln133_fu_1994_p2 == 1'd0)))) begin
        moving_mean2_we0 = 1'b1;
    end else begin
        moving_mean2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        moving_var1_address0 = zext_ln173_fu_2189_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        moving_var1_address0 = zext_ln123_fu_1955_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        moving_var1_address0 = zext_ln71_fu_1612_p1;
    end else begin
        moving_var1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state16) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln121_fu_1943_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state33)))) begin
        moving_var1_ce0 = 1'b1;
    end else begin
        moving_var1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        moving_var1_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        moving_var1_d0 = 32'd0;
    end else begin
        moving_var1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln121_fu_1943_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln121_fu_1943_p2 == 1'd0)))) begin
        moving_var1_we0 = 1'b1;
    end else begin
        moving_var1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        moving_var2_address0 = zext_ln186_fu_2294_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        moving_var2_address0 = zext_ln139_fu_2023_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        moving_var2_address0 = zext_ln76_fu_1680_p1;
    end else begin
        moving_var2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state20) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln137_fu_2011_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state37)))) begin
        moving_var2_ce0 = 1'b1;
    end else begin
        moving_var2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        moving_var2_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        moving_var2_d0 = 32'd0;
    end else begin
        moving_var2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln137_fu_2011_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state37) & (icmp_ln137_fu_2011_p2 == 1'd0)))) begin
        moving_var2_we0 = 1'b1;
    end else begin
        moving_var2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        outputs_address0 = zext_ln201_fu_2348_p1;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        outputs_address0 = outputs_addr_2_reg_2915;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        outputs_address0 = zext_ln194_fu_2330_p1;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        outputs_address0 = zext_ln191_fu_2313_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        outputs_address0 = zext_ln63_fu_1416_p1;
    end else begin
        outputs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        outputs_bias_address0 = zext_ln194_fu_2330_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        outputs_bias_address0 = zext_ln115_fu_1921_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        outputs_bias_address0 = zext_ln66_fu_1467_p1;
    end else begin
        outputs_bias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state8) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln113_fu_1909_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state31)))) begin
        outputs_bias_ce0 = 1'b1;
    end else begin
        outputs_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        outputs_bias_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        outputs_bias_d0 = 32'd0;
    end else begin
        outputs_bias_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln113_fu_1909_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln113_fu_1909_p2 == 1'd0)))) begin
        outputs_bias_we0 = 1'b1;
    end else begin
        outputs_bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state113))) begin
        outputs_ce0 = 1'b1;
    end else begin
        outputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        outputs_d0 = reg_1324;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        outputs_d0 = tmp_s_reg_2902;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        outputs_d0 = 32'd0;
    end else begin
        outputs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        outputs_matrix_address0 = zext_ln102_1_fu_1870_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        outputs_matrix_address0 = zext_ln69_fu_1572_p1;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        outputs_matrix_address0 = grp_dot_product_fu_1271_a_address0;
    end else begin
        outputs_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln100_fu_1849_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state28)))) begin
        outputs_matrix_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        outputs_matrix_ce0 = grp_dot_product_fu_1271_a_ce0;
    end else begin
        outputs_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        outputs_matrix_d0 = S_AXIS_TDATA_int;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        outputs_matrix_d0 = 32'd0;
    end else begin
        outputs_matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln100_fu_1849_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln100_fu_1849_p2 == 1'd0)))) begin
        outputs_matrix_we0 = 1'b1;
    end else begin
        outputs_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state113))) begin
        outputs_we0 = 1'b1;
    end else begin
        outputs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln60_fu_1370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln61_fu_1387_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln62_fu_1404_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln63_fu_1421_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln64_fu_1438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln65_fu_1455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln66_fu_1472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln67_1_fu_1509_p2 == 1'd1) & (icmp_ln67_fu_1503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((icmp_ln67_fu_1503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln67_1_fu_1509_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln68_1_fu_1546_p2 == 1'd1) & (icmp_ln68_fu_1540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((icmp_ln68_fu_1540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln68_1_fu_1546_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln69_1_fu_1583_p2 == 1'd1) & (icmp_ln69_fu_1577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((icmp_ln69_fu_1577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln69_1_fu_1583_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln70_fu_1600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln71_fu_1617_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln72_fu_1634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln73_fu_1651_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln75_fu_1668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln76_fu_1685_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln77_fu_1702_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln78_fu_1719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln87_fu_1725_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln88_fu_1749_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln88_fu_1749_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln88_fu_1749_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln88_fu_1749_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln93_fu_1775_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln94_fu_1799_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln94_fu_1799_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln94_fu_1799_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln94_fu_1799_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln99_fu_1825_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln100_fu_1849_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln100_fu_1849_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln100_fu_1849_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln100_fu_1849_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln105_fu_1875_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln105_fu_1875_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln105_fu_1875_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln105_fu_1875_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln109_fu_1892_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state30) & (icmp_ln109_fu_1892_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln109_fu_1892_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state30) & (icmp_ln109_fu_1892_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln113_fu_1909_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln113_fu_1909_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln113_fu_1909_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln113_fu_1909_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln117_fu_1926_p2 == 1'd0)) & (icmp_ln117_fu_1926_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln117_fu_1926_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state32) & (icmp_ln117_fu_1926_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln121_fu_1943_p2 == 1'd0)) & (icmp_ln121_fu_1943_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln121_fu_1943_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln121_fu_1943_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln125_fu_1960_p2 == 1'd0)) & (icmp_ln125_fu_1960_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln125_fu_1960_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state34) & (icmp_ln125_fu_1960_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln129_fu_1977_p2 == 1'd0)) & (icmp_ln129_fu_1977_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln129_fu_1977_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state35) & (icmp_ln129_fu_1977_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln133_fu_1994_p2 == 1'd0)) & (icmp_ln133_fu_1994_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln133_fu_1994_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln133_fu_1994_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln137_fu_2011_p2 == 1'd0)) & (icmp_ln137_fu_2011_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln137_fu_2011_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state37) & (icmp_ln137_fu_2011_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln141_fu_2028_p2 == 1'd0)) & (icmp_ln141_fu_2028_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln141_fu_2028_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln141_fu_2028_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if ((~(((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd1)) | ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln145_fu_2045_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else if ((~(((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd1)) | ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd0))) & (icmp_ln145_fu_2045_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == S_AXIS_TVALID_int) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (icmp_ln156_fu_2062_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state41) & (icmp_ln156_fu_2062_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln158_fu_2074_p2 == 1'd0)) & (icmp_ln158_fu_2074_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln158_fu_2074_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state42) & (icmp_ln158_fu_2074_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln164_fu_2091_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((grp_dot_product_2_fu_1255_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln167_fu_2108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state54 : begin
            if (((icmp_ln172_fu_2177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state77 : begin
            if (((icmp_ln177_fu_2196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((grp_dot_product_1_fu_1263_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state80 : begin
            if (((icmp_ln180_fu_2213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state88 : begin
            if (((icmp_ln185_fu_2282_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state111 : begin
            if (((icmp_ln190_fu_2301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state111))) begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state112 : begin
            if (((grp_dot_product_fu_1271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state112))) begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state114 : begin
            if (((icmp_ln193_fu_2318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state114))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state121 : begin
            if (((icmp_ln200_fu_2336_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state121))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end
        end
        ap_ST_fsm_state122 : begin
            if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state122))) begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state122;
            end
        end
        ap_ST_fsm_state123 : begin
            if (((1'b1 == M_AXIS_TREADY_int) & (1'b1 == ap_CS_fsm_state123))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TLAST_int = tmp_last_reg_2943;

assign M_AXIS_TVALID = regslice_both_M_AXIS_V_data_U_vld_out;

assign add_ln102_fu_1865_p2 = (zext_ln100_reg_2577 + zext_ln102_fu_1861_p1);

assign add_ln60_fu_1359_p2 = (phi_ln60_reg_710 + 8'd1);

assign add_ln61_fu_1376_p2 = (phi_ln61_reg_721 + 8'd1);

assign add_ln62_fu_1393_p2 = (phi_ln62_reg_732 + 8'd1);

assign add_ln63_fu_1410_p2 = (phi_ln63_reg_743 + 6'd1);

assign add_ln64_fu_1427_p2 = (phi_ln64_reg_754 + 8'd1);

assign add_ln65_fu_1444_p2 = (phi_ln65_reg_765 + 8'd1);

assign add_ln66_fu_1461_p2 = (phi_ln66_reg_776 + 6'd1);

assign add_ln67_1_fu_1484_p2 = (phi_ln67_1_reg_799 + 8'd1);

assign add_ln67_fu_1478_p2 = (phi_ln67_reg_787 + 8'd1);

assign add_ln68_1_fu_1521_p2 = (phi_ln68_1_reg_822 + 8'd1);

assign add_ln68_fu_1515_p2 = (phi_ln68_reg_810 + 8'd1);

assign add_ln69_1_fu_1558_p2 = (phi_ln69_1_reg_845 + 8'd1);

assign add_ln69_fu_1552_p2 = (phi_ln69_reg_833 + 6'd1);

assign add_ln70_fu_1589_p2 = (phi_ln70_reg_856 + 8'd1);

assign add_ln71_fu_1606_p2 = (phi_ln71_reg_867 + 8'd1);

assign add_ln72_fu_1623_p2 = (phi_ln72_reg_878 + 8'd1);

assign add_ln73_fu_1640_p2 = (phi_ln73_reg_889 + 8'd1);

assign add_ln75_fu_1657_p2 = (phi_ln75_reg_900 + 8'd1);

assign add_ln76_fu_1674_p2 = (phi_ln76_reg_911 + 8'd1);

assign add_ln77_fu_1691_p2 = (phi_ln77_reg_922 + 8'd1);

assign add_ln78_fu_1708_p2 = (phi_ln78_reg_933 + 8'd1);

assign add_ln90_fu_1765_p2 = (zext_ln88_reg_2535 + zext_ln90_fu_1761_p1);

assign add_ln96_fu_1815_p2 = (zext_ln94_reg_2556 + zext_ln96_fu_1811_p1);

assign and_ln16_1_fu_2267_p2 = (or_ln16_1_fu_2261_p2 & grp_fu_1295_p2);

assign and_ln16_fu_2162_p2 = (or_ln16_fu_2156_p2 & grp_fu_1295_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

always @ (*) begin
    ap_block_state24 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln88_fu_1749_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state26 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln94_fu_1799_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state28 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln100_fu_1849_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state29 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln105_fu_1875_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state30 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln109_fu_1892_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state31 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln113_fu_1909_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state32 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln117_fu_1926_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state33 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln121_fu_1943_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state34 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln125_fu_1960_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state35 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln129_fu_1977_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state36 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln133_fu_1994_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state37 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln137_fu_2011_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state38 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln141_fu_2028_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state39 = (((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd1)) | ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln145_fu_2045_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state42 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln158_fu_2074_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln16_1_fu_2231_p1 = reg_1324;

assign bitcast_ln16_fu_2126_p1 = reg_1324;

assign grp_dot_product_1_fu_1263_ap_start = grp_dot_product_1_fu_1263_ap_start_reg;

assign grp_dot_product_2_fu_1255_ap_start = grp_dot_product_2_fu_1255_ap_start_reg;

assign grp_dot_product_fu_1271_ap_start = grp_dot_product_fu_1271_ap_start_reg;

assign i_24_fu_1781_p2 = (i_1_reg_966 + 9'd1);

assign i_26_fu_1831_p2 = (i_2_reg_988 + 7'd1);

assign i_47_fu_1881_p2 = (i_3_reg_1010 + 9'd1);

assign i_48_fu_1898_p2 = (i_4_reg_1021 + 9'd1);

assign i_49_fu_1915_p2 = (i_5_reg_1032 + 7'd1);

assign i_50_fu_1932_p2 = (i_6_reg_1043 + 9'd1);

assign i_51_fu_1949_p2 = (i_7_reg_1054 + 9'd1);

assign i_52_fu_1966_p2 = (i_8_reg_1065 + 9'd1);

assign i_53_fu_1983_p2 = (i_9_reg_1076 + 9'd1);

assign i_54_fu_2000_p2 = (i_10_reg_1087 + 9'd1);

assign i_55_fu_2017_p2 = (i_11_reg_1098 + 9'd1);

assign i_56_fu_2034_p2 = (i_12_reg_1109 + 9'd1);

assign i_57_fu_2051_p2 = (i_13_reg_1120 + 9'd1);

assign i_58_fu_2080_p2 = (i_14_reg_1142 + 9'd1);

assign i_59_fu_2097_p2 = (i_15_reg_1153 + 9'd1);

assign i_60_fu_2114_p2 = (i_16_reg_1165 + 9'd1);

assign i_61_fu_2183_p2 = (i_17_reg_1176 + 9'd1);

assign i_62_fu_2202_p2 = (i_18_reg_1187 + 9'd1);

assign i_63_fu_2219_p2 = (i_19_reg_1199 + 9'd1);

assign i_64_fu_2288_p2 = (i_20_reg_1210 + 9'd1);

assign i_65_fu_2307_p2 = (i_21_reg_1221 + 7'd1);

assign i_66_fu_2324_p2 = (i_22_reg_1233 + 7'd1);

assign i_67_fu_2342_p2 = (i_23_reg_1244 + 7'd1);

assign i_fu_1731_p2 = (i_0_reg_944 + 9'd1);

assign icmp_ln100_fu_1849_p2 = ((j_2_reg_999 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_1875_p2 = ((i_3_reg_1010 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_1892_p2 = ((i_4_reg_1021 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_1909_p2 = ((i_5_reg_1032 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln117_fu_1926_p2 = ((i_6_reg_1043 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_1943_p2 = ((i_7_reg_1054 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_1960_p2 = ((i_8_reg_1065 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_1977_p2 = ((i_9_reg_1076 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_1994_p2 = ((i_10_reg_1087 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_2011_p2 = ((i_11_reg_1098 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_2028_p2 = ((i_12_reg_1109 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln145_fu_2045_p2 = ((i_13_reg_1120 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_2062_p2 = ((j_3_reg_1131 == 20'd1000000) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_2074_p2 = ((i_14_reg_1142 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_2091_p2 = ((i_15_reg_1153 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_2108_p2 = ((i_16_reg_1165 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_2150_p2 = ((trunc_ln16_fu_2140_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_2_fu_2249_p2 = ((tmp_3_fu_2235_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln16_3_fu_2255_p2 = ((trunc_ln16_1_fu_2245_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_2144_p2 = ((tmp_1_fu_2130_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_2177_p2 = ((i_17_reg_1176 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_2196_p2 = ((i_18_reg_1187 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_2213_p2 = ((i_19_reg_1199 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_2282_p2 = ((i_20_reg_1210 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_2301_p2 = ((i_21_reg_1221 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln193_fu_2318_p2 = ((i_22_reg_1233 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_2336_p2 = ((i_23_reg_1244 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_1370_p2 = ((phi_ln60_reg_710 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_1387_p2 = ((phi_ln61_reg_721 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_1404_p2 = ((phi_ln62_reg_732 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_1421_p2 = ((phi_ln63_reg_743 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_1438_p2 = ((phi_ln64_reg_754 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_1455_p2 = ((phi_ln65_reg_765 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1472_p2 = ((phi_ln66_reg_776 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln67_1_fu_1509_p2 = ((phi_ln67_reg_787 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_1503_p2 = ((phi_ln67_1_reg_799 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln68_1_fu_1546_p2 = ((phi_ln68_reg_810 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_1540_p2 = ((phi_ln68_1_reg_822 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_1583_p2 = ((phi_ln69_reg_833 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_1577_p2 = ((phi_ln69_1_reg_845 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_1600_p2 = ((phi_ln70_reg_856 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_1617_p2 = ((phi_ln71_reg_867 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_1634_p2 = ((phi_ln72_reg_878 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_1651_p2 = ((phi_ln73_reg_889 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_1668_p2 = ((phi_ln75_reg_900 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_1685_p2 = ((phi_ln76_reg_911 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_1702_p2 = ((phi_ln77_reg_922 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1719_p2 = ((phi_ln78_reg_933 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_1725_p2 = ((i_0_reg_944 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_1749_p2 = ((j_0_reg_955 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_1775_p2 = ((i_1_reg_966 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_1799_p2 = ((j_1_reg_977 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_1825_p2 = ((i_2_reg_988 == 7'd64) ? 1'b1 : 1'b0);

assign j_4_fu_1805_p2 = (j_1_reg_977 + 9'd1);

assign j_5_fu_1855_p2 = (j_2_reg_999 + 9'd1);

assign j_6_fu_2068_p2 = (j_3_reg_1131 + 20'd1);

assign j_fu_1755_p2 = (j_0_reg_955 + 9'd1);

assign or_ln16_1_fu_2261_p2 = (icmp_ln16_3_fu_2255_p2 | icmp_ln16_2_fu_2249_p2);

assign or_ln16_fu_2156_p2 = (icmp_ln16_fu_2144_p2 | icmp_ln16_1_fu_2150_p2);

assign select_ln16_1_fu_2273_p3 = ((and_ln16_1_fu_2267_p2[0:0] === 1'b1) ? reg_1324 : 32'd0);

assign select_ln16_fu_2168_p3 = ((and_ln16_fu_2162_p2[0:0] === 1'b1) ? reg_1324 : 32'd0);

assign tmp_1_fu_2130_p4 = {{bitcast_ln16_fu_2126_p1[30:23]}};

assign tmp_258_fu_1737_p3 = {{i_0_reg_944}, {8'd0}};

assign tmp_259_fu_1787_p3 = {{i_1_reg_966}, {8'd0}};

assign tmp_260_fu_1837_p3 = {{i_2_reg_988}, {8'd0}};

assign tmp_3_fu_2235_p4 = {{bitcast_ln16_1_fu_2231_p1[30:23]}};

assign tmp_7_fu_1527_p3 = {{phi_ln68_reg_810}, {phi_ln68_1_reg_822}};

assign tmp_8_fu_1564_p3 = {{phi_ln69_reg_833}, {phi_ln69_1_reg_845}};

assign tmp_fu_1490_p3 = {{phi_ln67_reg_787}, {phi_ln67_1_reg_799}};

assign tmp_last_fu_2353_p2 = ((i_23_reg_1244 == 7'd63) ? 1'b1 : 1'b0);

assign trunc_ln16_1_fu_2245_p1 = bitcast_ln16_1_fu_2231_p1[22:0];

assign trunc_ln16_fu_2140_p1 = bitcast_ln16_fu_2126_p1[22:0];

assign zext_ln100_fu_1845_p1 = tmp_260_fu_1837_p3;

assign zext_ln102_1_fu_1870_p1 = add_ln102_fu_1865_p2;

assign zext_ln102_fu_1861_p1 = j_2_reg_999;

assign zext_ln107_fu_1887_p1 = i_3_reg_1010;

assign zext_ln111_fu_1904_p1 = i_4_reg_1021;

assign zext_ln115_fu_1921_p1 = i_5_reg_1032;

assign zext_ln119_fu_1938_p1 = i_6_reg_1043;

assign zext_ln123_fu_1955_p1 = i_7_reg_1054;

assign zext_ln127_fu_1972_p1 = i_8_reg_1065;

assign zext_ln131_fu_1989_p1 = i_9_reg_1076;

assign zext_ln135_fu_2006_p1 = i_10_reg_1087;

assign zext_ln139_fu_2023_p1 = i_11_reg_1098;

assign zext_ln143_fu_2040_p1 = i_12_reg_1109;

assign zext_ln147_fu_2057_p1 = i_13_reg_1120;

assign zext_ln160_fu_2086_p1 = i_14_reg_1142;

assign zext_ln165_fu_2103_p1 = i_15_reg_1153;

assign zext_ln168_fu_2120_p1 = i_16_reg_1165;

assign zext_ln173_fu_2189_p1 = i_17_reg_1176;

assign zext_ln178_fu_2208_p1 = i_18_reg_1187;

assign zext_ln181_fu_2225_p1 = i_19_reg_1199;

assign zext_ln186_fu_2294_p1 = i_20_reg_1210;

assign zext_ln191_fu_2313_p1 = i_21_reg_1221;

assign zext_ln194_fu_2330_p1 = i_22_reg_1233;

assign zext_ln201_fu_2348_p1 = i_23_reg_1244;

assign zext_ln60_fu_1365_p1 = phi_ln60_reg_710;

assign zext_ln61_fu_1382_p1 = phi_ln61_reg_721;

assign zext_ln62_fu_1399_p1 = phi_ln62_reg_732;

assign zext_ln63_fu_1416_p1 = phi_ln63_reg_743;

assign zext_ln64_fu_1433_p1 = phi_ln64_reg_754;

assign zext_ln65_fu_1450_p1 = phi_ln65_reg_765;

assign zext_ln66_fu_1467_p1 = phi_ln66_reg_776;

assign zext_ln67_fu_1498_p1 = tmp_fu_1490_p3;

assign zext_ln68_fu_1535_p1 = tmp_7_fu_1527_p3;

assign zext_ln69_fu_1572_p1 = tmp_8_fu_1564_p3;

assign zext_ln70_fu_1595_p1 = phi_ln70_reg_856;

assign zext_ln71_fu_1612_p1 = phi_ln71_reg_867;

assign zext_ln72_fu_1629_p1 = phi_ln72_reg_878;

assign zext_ln73_fu_1646_p1 = phi_ln73_reg_889;

assign zext_ln75_fu_1663_p1 = phi_ln75_reg_900;

assign zext_ln76_fu_1680_p1 = phi_ln76_reg_911;

assign zext_ln77_fu_1697_p1 = phi_ln77_reg_922;

assign zext_ln78_fu_1714_p1 = phi_ln78_reg_933;

assign zext_ln88_fu_1745_p1 = tmp_258_fu_1737_p3;

assign zext_ln90_1_fu_1770_p1 = add_ln90_fu_1765_p2;

assign zext_ln90_fu_1761_p1 = j_0_reg_955;

assign zext_ln94_fu_1795_p1 = tmp_259_fu_1787_p3;

assign zext_ln96_1_fu_1820_p1 = add_ln96_fu_1815_p2;

assign zext_ln96_fu_1811_p1 = j_1_reg_977;

always @ (posedge ap_clk) begin
    zext_ln88_reg_2535[7:0] <= 8'b00000000;
    zext_ln88_reg_2535[17] <= 1'b0;
    zext_ln94_reg_2556[7:0] <= 8'b00000000;
    zext_ln94_reg_2556[17] <= 1'b0;
    zext_ln100_reg_2577[7:0] <= 8'b00000000;
    zext_ln100_reg_2577[15] <= 1'b0;
    zext_ln173_reg_2748[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln186_reg_2843[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //MLP_1
